//
// RsearchAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class RsearchAPI {
    /**

     - parameter indexName: (path) Name of the index 
     - parameter docTypeName: (path) Name of the document_type 
     - parameter docId: (path) Document ID 
     - parameter documentDetails: (body) Details of the document 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addDocument(indexName: String, docTypeName: String, docId: String, documentDetails: Any, completion: @escaping ((_ data: InlineResponse2005?,_ error: Error?) -> Void)) {
        addDocumentWithRequestBuilder(indexName: indexName, docTypeName: docTypeName, docId: docId, documentDetails: documentDetails).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - POST /indexes/{index_name}/document_types/{doc_type_name}/documents/{doc_id}
     - Creates `doc_id` in `doc_type_name` for `index_name`
     - API Key:
       - type: apiKey auth_token (QUERY)
       - name: authToken
     - API Key:
       - type: apiKey X-RSearch-App-ID 
       - name: writeAppID
     - examples: [{contentType=application/json, example={
  "document" : {
    "result" : "created"
  }
}}]
     
     - parameter indexName: (path) Name of the index 
     - parameter docTypeName: (path) Name of the document_type 
     - parameter docId: (path) Document ID 
     - parameter documentDetails: (body) Details of the document 

     - returns: RequestBuilder<InlineResponse2005> 
     */
    open class func addDocumentWithRequestBuilder(indexName: String, docTypeName: String, docId: String, documentDetails: Any) -> RequestBuilder<InlineResponse2005> {
        var path = "/indexes/{index_name}/document_types/{doc_type_name}/documents/{doc_id}"
        path = path.replacingOccurrences(of: "{index_name}", with: "\(indexName)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{doc_type_name}", with: "\(docTypeName)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{doc_id}", with: "\(docId)", options: .literal, range: nil)
        let URLString = RSearchClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: documentDetails)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InlineResponse2005>.Type = RSearchClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter indexName: (path) Name of the index 
     - parameter docTypeName: (path) Name of the document_type 
     - parameter docTypeDetails: (body) Details of the document_type 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addDocumentType(indexName: String, docTypeName: String, docTypeDetails: Any, completion: @escaping ((_ data: InlineResponse2011?,_ error: Error?) -> Void)) {
        addDocumentTypeWithRequestBuilder(indexName: indexName, docTypeName: docTypeName, docTypeDetails: docTypeDetails).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - POST /indexes/{index_name}/document_types/{doc_type_name}
     - Creates specific `document_type` in `index_name` with specified parameters
     - API Key:
       - type: apiKey auth_token (QUERY)
       - name: authToken
     - API Key:
       - type: apiKey X-RSearch-App-ID 
       - name: readAppID
     - examples: [{contentType=application/json, example={
  "document_type" : {
    "result" : "created"
  }
}}]
     
     - parameter indexName: (path) Name of the index 
     - parameter docTypeName: (path) Name of the document_type 
     - parameter docTypeDetails: (body) Details of the document_type 

     - returns: RequestBuilder<InlineResponse2011> 
     */
    open class func addDocumentTypeWithRequestBuilder(indexName: String, docTypeName: String, docTypeDetails: Any) -> RequestBuilder<InlineResponse2011> {
        var path = "/indexes/{index_name}/document_types/{doc_type_name}"
        path = path.replacingOccurrences(of: "{index_name}", with: "\(indexName)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{doc_type_name}", with: "\(docTypeName)", options: .literal, range: nil)
        let URLString = RSearchClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: docTypeDetails)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InlineResponse2011>.Type = RSearchClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter indexName: (path) Name of the index 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addIndex(indexName: String, completion: @escaping ((_ data: InlineResponse201?,_ error: Error?) -> Void)) {
        addIndexWithRequestBuilder(indexName: indexName).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - POST /indexes/{index_name}
     - Creates `a new index`
     - API Key:
       - type: apiKey auth_token (QUERY)
       - name: authToken
     - API Key:
       - type: apiKey X-RSearch-App-ID 
       - name: writeAppID
     - examples: [{contentType=application/json, example={
  "index" : {
    "result" : "created"
  }
}}]
     
     - parameter indexName: (path) Name of the index 

     - returns: RequestBuilder<InlineResponse201> 
     */
    open class func addIndexWithRequestBuilder(indexName: String) -> RequestBuilder<InlineResponse201> {
        var path = "/indexes/{index_name}"
        path = path.replacingOccurrences(of: "{index_name}", with: "\(indexName)", options: .literal, range: nil)
        let URLString = RSearchClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InlineResponse201>.Type = RSearchClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter indexName: (path) Name of the index 
     - parameter docTypeName: (path) Name of the document_type 
     - parameter docId: (path) Document ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteDocument(indexName: String, docTypeName: String, docId: String, completion: @escaping ((_ data: InlineResponse2006?,_ error: Error?) -> Void)) {
        deleteDocumentWithRequestBuilder(indexName: indexName, docTypeName: docTypeName, docId: docId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - DELETE /indexes/{index_name}/document_types/{doc_type_name}/documents/{doc_id}
     - Deletes `doc_id` in `doc_type_name` for `index_name`
     - API Key:
       - type: apiKey auth_token (QUERY)
       - name: authToken
     - API Key:
       - type: apiKey X-RSearch-App-ID 
       - name: writeAppID
     - examples: [{contentType=application/json, example={
  "document" : {
    "result" : "deleted"
  }
}}]
     
     - parameter indexName: (path) Name of the index 
     - parameter docTypeName: (path) Name of the document_type 
     - parameter docId: (path) Document ID 

     - returns: RequestBuilder<InlineResponse2006> 
     */
    open class func deleteDocumentWithRequestBuilder(indexName: String, docTypeName: String, docId: String) -> RequestBuilder<InlineResponse2006> {
        var path = "/indexes/{index_name}/document_types/{doc_type_name}/documents/{doc_id}"
        path = path.replacingOccurrences(of: "{index_name}", with: "\(indexName)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{doc_type_name}", with: "\(docTypeName)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{doc_id}", with: "\(docId)", options: .literal, range: nil)
        let URLString = RSearchClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InlineResponse2006>.Type = RSearchClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter indexName: (path) Name of the index 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteIndex(indexName: String, completion: @escaping ((_ data: InlineResponse202?,_ error: Error?) -> Void)) {
        deleteIndexWithRequestBuilder(indexName: indexName).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - DELETE /indexes/{index_name}
     - Deletes `an index` {index_name}
     - API Key:
       - type: apiKey auth_token (QUERY)
       - name: authToken
     - API Key:
       - type: apiKey X-RSearch-App-ID 
       - name: writeAppID
     - examples: [{contentType=application/json, example={
  "index" : {
    "result" : "deleted"
  }
}}]
     
     - parameter indexName: (path) Name of the index 

     - returns: RequestBuilder<InlineResponse202> 
     */
    open class func deleteIndexWithRequestBuilder(indexName: String) -> RequestBuilder<InlineResponse202> {
        var path = "/indexes/{index_name}"
        path = path.replacingOccurrences(of: "{index_name}", with: "\(indexName)", options: .literal, range: nil)
        let URLString = RSearchClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InlineResponse202>.Type = RSearchClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter indexName: (path) Name of the index 
     - parameter docTypeName: (path) Name of the Document)type 
     - parameter search: (body) Details of the search query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAdvancedSearchResults(indexName: String, docTypeName: String, search: Any, completion: @escaping ((_ data: InlineResponse2007?,_ error: Error?) -> Void)) {
        getAdvancedSearchResultsWithRequestBuilder(indexName: indexName, docTypeName: docTypeName, search: search).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - POST /indexes/{index_name}/document_types/{doc_type_name}/search
     - Advanced Search which gets all documents in `index_name` for provided search criteria
     - API Key:
       - type: apiKey auth_token (QUERY)
       - name: authToken
     - API Key:
       - type: apiKey X-RSearch-App-ID 
       - name: writeAppID
     - examples: [{contentType=application/json, example={
  "search_results" : {
    "metadata" : {
      "number_documents" : 2,
      "query" : "query_string"
    },
    "results" : ""
  }
}}]
     
     - parameter indexName: (path) Name of the index 
     - parameter docTypeName: (path) Name of the Document)type 
     - parameter search: (body) Details of the search query 

     - returns: RequestBuilder<InlineResponse2007> 
     */
    open class func getAdvancedSearchResultsWithRequestBuilder(indexName: String, docTypeName: String, search: Any) -> RequestBuilder<InlineResponse2007> {
        var path = "/indexes/{index_name}/document_types/{doc_type_name}/search"
        path = path.replacingOccurrences(of: "{index_name}", with: "\(indexName)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{doc_type_name}", with: "\(docTypeName)", options: .literal, range: nil)
        let URLString = RSearchClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: search)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InlineResponse2007>.Type = RSearchClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter indexName: (path) Name of the index 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAllDocumentTypes(indexName: String, completion: @escaping ((_ data: InlineResponse2002?,_ error: Error?) -> Void)) {
        getAllDocumentTypesWithRequestBuilder(indexName: indexName).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /indexes/{index_name}/document_types
     - Gets `All document_types` present in `index_name`
     - API Key:
       - type: apiKey auth_token (QUERY)
       - name: authToken
     - API Key:
       - type: apiKey X-RSearch-App-ID 
       - name: readAppID
     - examples: [{contentType=application/json, example={
  "indexes" : {
    "metadata" : {
      "number_document_types" : 2
    },
    "results" : ""
  }
}}]
     
     - parameter indexName: (path) Name of the index 

     - returns: RequestBuilder<InlineResponse2002> 
     */
    open class func getAllDocumentTypesWithRequestBuilder(indexName: String) -> RequestBuilder<InlineResponse2002> {
        var path = "/indexes/{index_name}/document_types"
        path = path.replacingOccurrences(of: "{index_name}", with: "\(indexName)", options: .literal, range: nil)
        let URLString = RSearchClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InlineResponse2002>.Type = RSearchClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter indexName: (path) Name of the index 
     - parameter docTypeName: (path) Name of the document_type 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAllDocuments(indexName: String, docTypeName: String, completion: @escaping ((_ data: InlineResponse2002?,_ error: Error?) -> Void)) {
        getAllDocumentsWithRequestBuilder(indexName: indexName, docTypeName: docTypeName).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /indexes/{index_name}/document_types/{doc_type_name}/documents
     - Fetches all documents in `doc_type_name` for `index_name`
     - API Key:
       - type: apiKey auth_token (QUERY)
       - name: authToken
     - API Key:
       - type: apiKey X-RSearch-App-ID 
       - name: readAppID
     - examples: [{contentType=application/json, example={
  "indexes" : {
    "metadata" : {
      "number_document_types" : 2
    },
    "results" : ""
  }
}}]
     
     - parameter indexName: (path) Name of the index 
     - parameter docTypeName: (path) Name of the document_type 

     - returns: RequestBuilder<InlineResponse2002> 
     */
    open class func getAllDocumentsWithRequestBuilder(indexName: String, docTypeName: String) -> RequestBuilder<InlineResponse2002> {
        var path = "/indexes/{index_name}/document_types/{doc_type_name}/documents"
        path = path.replacingOccurrences(of: "{index_name}", with: "\(indexName)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{doc_type_name}", with: "\(docTypeName)", options: .literal, range: nil)
        let URLString = RSearchClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InlineResponse2002>.Type = RSearchClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAllIndexes(completion: @escaping ((_ data: InlineResponse200?,_ error: Error?) -> Void)) {
        getAllIndexesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /indexes
     - Fetches `All indexes`
     - API Key:
       - type: apiKey auth_token (QUERY)
       - name: authToken
     - API Key:
       - type: apiKey X-RSearch-App-ID 
       - name: readAppID
     - examples: [{contentType=application/json, example={
  "indexes" : {
    "metadata" : {
      "number_indexes" : 2
    },
    "results" : ""
  }
}}]

     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func getAllIndexesWithRequestBuilder() -> RequestBuilder<InlineResponse200> {
        let path = "/indexes"
        let URLString = RSearchClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InlineResponse200>.Type = RSearchClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter indexName: (path) Name of the index 
     - parameter q: (query) Search Query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getBasicSearchResults(indexName: String, q: String, completion: @escaping ((_ data: InlineResponse2007?,_ error: Error?) -> Void)) {
        getBasicSearchResultsWithRequestBuilder(indexName: indexName, q: q).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /indexes/{index_name}/search
     - Basic Search which gets all documents in `index_name` for provided search criteria
     - API Key:
       - type: apiKey auth_token (QUERY)
       - name: authToken
     - API Key:
       - type: apiKey X-RSearch-App-ID 
       - name: readAppID
     - examples: [{contentType=application/json, example={
  "search_results" : {
    "metadata" : {
      "number_documents" : 2,
      "query" : "query_string"
    },
    "results" : ""
  }
}}]
     
     - parameter indexName: (path) Name of the index 
     - parameter q: (query) Search Query 

     - returns: RequestBuilder<InlineResponse2007> 
     */
    open class func getBasicSearchResultsWithRequestBuilder(indexName: String, q: String) -> RequestBuilder<InlineResponse2007> {
        var path = "/indexes/{index_name}/search"
        path = path.replacingOccurrences(of: "{index_name}", with: "\(indexName)", options: .literal, range: nil)
        let URLString = RSearchClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "q": q
        ])
        

        let requestBuilder: RequestBuilder<InlineResponse2007>.Type = RSearchClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter indexName: (path) Name of the index 
     - parameter docTypeName: (path) Name of the document_type 
     - parameter docId: (path) Document ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDocument(indexName: String, docTypeName: String, docId: String, completion: @escaping ((_ data: InlineResponse2004?,_ error: Error?) -> Void)) {
        getDocumentWithRequestBuilder(indexName: indexName, docTypeName: docTypeName, docId: docId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /indexes/{index_name}/document_types/{doc_type_name}/documents/{doc_id}
     - Fetches details of `doc_id` in `doc_type_name` for `index_name`
     - API Key:
       - type: apiKey auth_token (QUERY)
       - name: authToken
     - API Key:
       - type: apiKey X-RSearch-App-ID 
       - name: readAppID
     - examples: [{contentType=application/json, example={
  "document" : {
    "result" : {
      "fields" : [ {
        "name" : "property_1",
        "value" : "value_1"
      }, {
        "name" : "property_2",
        "value" : "value_2"
      } ],
      "document_id" : 100
    }
  }
}}]
     
     - parameter indexName: (path) Name of the index 
     - parameter docTypeName: (path) Name of the document_type 
     - parameter docId: (path) Document ID 

     - returns: RequestBuilder<InlineResponse2004> 
     */
    open class func getDocumentWithRequestBuilder(indexName: String, docTypeName: String, docId: String) -> RequestBuilder<InlineResponse2004> {
        var path = "/indexes/{index_name}/document_types/{doc_type_name}/documents/{doc_id}"
        path = path.replacingOccurrences(of: "{index_name}", with: "\(indexName)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{doc_type_name}", with: "\(docTypeName)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{doc_id}", with: "\(docId)", options: .literal, range: nil)
        let URLString = RSearchClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InlineResponse2004>.Type = RSearchClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter indexName: (path) Name of the index 
     - parameter docTypeName: (path) Name of the document_type 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDocumentType(indexName: String, docTypeName: String, completion: @escaping ((_ data: InlineResponse2003?,_ error: Error?) -> Void)) {
        getDocumentTypeWithRequestBuilder(indexName: indexName, docTypeName: docTypeName).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /indexes/{index_name}/document_types/{doc_type_name}
     - Checks whether `document_type` in `index_name` exists
     - API Key:
       - type: apiKey auth_token (QUERY)
       - name: authToken
     - API Key:
       - type: apiKey X-RSearch-App-ID 
       - name: readAppID
     - examples: [{contentType=application/json, example={
  "document_type" : {
    "result" : {
      "fields" : [ {
        "type" : "datatype_1",
        "name" : "property_1"
      }, {
        "type" : "datatype_2",
        "name" : "property_2"
      } ],
      "name" : "document_type_1"
    }
  }
}}]
     
     - parameter indexName: (path) Name of the index 
     - parameter docTypeName: (path) Name of the document_type 

     - returns: RequestBuilder<InlineResponse2003> 
     */
    open class func getDocumentTypeWithRequestBuilder(indexName: String, docTypeName: String) -> RequestBuilder<InlineResponse2003> {
        var path = "/indexes/{index_name}/document_types/{doc_type_name}"
        path = path.replacingOccurrences(of: "{index_name}", with: "\(indexName)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{doc_type_name}", with: "\(docTypeName)", options: .literal, range: nil)
        let URLString = RSearchClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InlineResponse2003>.Type = RSearchClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter indexName: (path) Name of the index 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIndex(indexName: String, completion: @escaping ((_ data: InlineResponse2001?,_ error: Error?) -> Void)) {
        getIndexWithRequestBuilder(indexName: indexName).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /indexes/{index_name}
     - Checks whether `a particular index` {index_name} exists
     - API Key:
       - type: apiKey auth_token (QUERY)
       - name: authToken
     - API Key:
       - type: apiKey X-RSearch-App-ID 
       - name: readAppID
     - examples: [{contentType=application/json, example={
  "index" : {
    "result" : "available"
  }
}}]
     
     - parameter indexName: (path) Name of the index 

     - returns: RequestBuilder<InlineResponse2001> 
     */
    open class func getIndexWithRequestBuilder(indexName: String) -> RequestBuilder<InlineResponse2001> {
        var path = "/indexes/{index_name}"
        path = path.replacingOccurrences(of: "{index_name}", with: "\(indexName)", options: .literal, range: nil)
        let URLString = RSearchClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InlineResponse2001>.Type = RSearchClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter indexName: (path) Name of the index 
     - parameter docTypeName: (path) Name of the Document_type 
     - parameter q: (query) Details of the suggest query 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSuggestResults(indexName: String, docTypeName: String, q: String, completion: @escaping ((_ data: InlineResponse2008?,_ error: Error?) -> Void)) {
        getSuggestResultsWithRequestBuilder(indexName: indexName, docTypeName: docTypeName, q: q).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /indexes/{index_name}/document_types/{doc_type_name}/suggest
     - Basic Search - Gets Suggestions from `doc_type_name` in `index_name`
     - API Key:
       - type: apiKey auth_token (QUERY)
       - name: authToken
     - API Key:
       - type: apiKey X-RSearch-App-ID 
       - name: readAppID
     - examples: [{contentType=application/json, example={
  "suggest_results" : {
    "metadata" : {
      "number_suggest_results" : 2,
      "query" : "query_string"
    },
    "results" : ""
  }
}}]
     
     - parameter indexName: (path) Name of the index 
     - parameter docTypeName: (path) Name of the Document_type 
     - parameter q: (query) Details of the suggest query 

     - returns: RequestBuilder<InlineResponse2008> 
     */
    open class func getSuggestResultsWithRequestBuilder(indexName: String, docTypeName: String, q: String) -> RequestBuilder<InlineResponse2008> {
        var path = "/indexes/{index_name}/document_types/{doc_type_name}/suggest"
        path = path.replacingOccurrences(of: "{index_name}", with: "\(indexName)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{doc_type_name}", with: "\(docTypeName)", options: .literal, range: nil)
        let URLString = RSearchClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "q": q
        ])
        

        let requestBuilder: RequestBuilder<InlineResponse2008>.Type = RSearchClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
