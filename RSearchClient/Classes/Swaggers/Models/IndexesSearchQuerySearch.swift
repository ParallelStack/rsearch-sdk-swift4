//
// IndexesSearchQuerySearch.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class IndexesSearchQuerySearch: Codable {

    public var query: String
    public var indexes: [String]
    public var fuzzy: Double?
    public var resultFields: [String]?
    public var searchFields: [String]?
    public var pageNum: Double?
    public var pageCount: Double?
    public var filters: Any?
    public var sortFields: [Any]?
    public var aggregations: [SearchQuerySearchAggregations]?


    
    public init(query: String, indexes: [String], fuzzy: Double?, resultFields: [String]?, searchFields: [String]?, pageNum: Double?, pageCount: Double?, filters: Any?, sortFields: [Any]?, aggregations: [SearchQuerySearchAggregations]?) {
        self.query = query
        self.indexes = indexes
        self.fuzzy = fuzzy
        self.resultFields = resultFields
        self.searchFields = searchFields
        self.pageNum = pageNum
        self.pageCount = pageCount
        self.filters = filters
        self.sortFields = sortFields
        self.aggregations = aggregations
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encode(query, forKey: "query")
        try container.encode(indexes, forKey: "indexes")
        try container.encodeIfPresent(fuzzy, forKey: "fuzzy")
        try container.encodeIfPresent(resultFields, forKey: "result_fields")
        try container.encodeIfPresent(searchFields, forKey: "search_fields")
        try container.encodeIfPresent(pageNum, forKey: "page_num")
        try container.encodeIfPresent(pageCount, forKey: "page_count")
        try container.encodeIfPresent(filters, forKey: "filters")
        try container.encodeIfPresent(sortFields, forKey: "sort_fields")
        try container.encodeIfPresent(aggregations, forKey: "aggregations")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        query = try container.decode(String.self, forKey: "query")
        indexes = try container.decode([String].self, forKey: "indexes")
        fuzzy = try container.decodeIfPresent(Double.self, forKey: "fuzzy")
        resultFields = try container.decodeIfPresent([String].self, forKey: "result_fields")
        searchFields = try container.decodeIfPresent([String].self, forKey: "search_fields")
        pageNum = try container.decodeIfPresent(Double.self, forKey: "page_num")
        pageCount = try container.decodeIfPresent(Double.self, forKey: "page_count")
        filters = try container.decodeIfPresent(Any.self, forKey: "filters")
        sortFields = try container.decodeIfPresent([Any].self, forKey: "sort_fields")
        aggregations = try container.decodeIfPresent([SearchQuerySearchAggregations].self, forKey: "aggregations")
    }
}

