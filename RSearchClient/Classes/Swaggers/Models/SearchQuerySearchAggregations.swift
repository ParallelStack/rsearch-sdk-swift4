//
// SearchQuerySearchAggregations.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class SearchQuerySearchAggregations: Codable {

    public enum AggType: String, Codable { 
        case term = "term"
        case range = "range"
        case histogram = "histogram"
        case location = "location"
    }
    public var fieldName: String
    public var aggType: AggType
    public var termAggSize: Double?
    public var range: [Any]?
    public var origin: [Any]?
    public var buckets: Double?


    
    public init(fieldName: String, aggType: AggType, termAggSize: Double?, range: [Any]?, origin: [Any]?, buckets: Double?) {
        self.fieldName = fieldName
        self.aggType = aggType
        self.termAggSize = termAggSize
        self.range = range
        self.origin = origin
        self.buckets = buckets
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encode(fieldName, forKey: "field_name")
        try container.encode(aggType, forKey: "agg_type")
        try container.encodeIfPresent(termAggSize, forKey: "term_agg_size")
        try container.encodeIfPresent(range, forKey: "range")
        try container.encodeIfPresent(origin, forKey: "origin")
        try container.encodeIfPresent(buckets, forKey: "buckets")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        fieldName = try container.decode(String.self, forKey: "field_name")
        aggType = try container.decode(AggType.self, forKey: "agg_type")
        termAggSize = try container.decodeIfPresent(Double.self, forKey: "term_agg_size")
        range = try container.decodeIfPresent([Any].self, forKey: "range")
        origin = try container.decodeIfPresent([Any].self, forKey: "origin")
        buckets = try container.decodeIfPresent(Double.self, forKey: "buckets")
    }
}

